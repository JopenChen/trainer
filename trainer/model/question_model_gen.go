// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	questionFieldNames          = builder.RawFieldNames(&Question{})
	questionRows                = strings.Join(questionFieldNames, ",")
	questionRowsExpectAutoSet   = strings.Join(stringx.Remove(questionFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	questionRowsWithPlaceHolder = strings.Join(stringx.Remove(questionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	questionModel interface {
		Insert(ctx context.Context, data *Question) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Question, error)
		Update(ctx context.Context, data *Question) error
		Delete(ctx context.Context, id int64) error
	}

	defaultQuestionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Question struct {
		Id       int64        `db:"id"`        // 题目 ID
		Question string       `db:"question"`  // 题目
		Status   string       `db:"status"`    // 回答状态，已回答、未回答
		GroupId  int64        `db:"group_id"`  // 知识点分组 ID
		CreateAt time.Time    `db:"create_at"` // 创建时间
		UpdateAt time.Time    `db:"update_at"` // 更新时间
		DeleteAt sql.NullTime `db:"delete_at"` // 删除时间
	}
)

func newQuestionModel(conn sqlx.SqlConn) *defaultQuestionModel {
	return &defaultQuestionModel{
		conn:  conn,
		table: "`question`",
	}
}

func (m *defaultQuestionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultQuestionModel) FindOne(ctx context.Context, id int64) (*Question, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", questionRows, m.table)
	var resp Question
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultQuestionModel) Insert(ctx context.Context, data *Question) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, questionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Question, data.Status, data.GroupId, data.DeleteAt)
	return ret, err
}

func (m *defaultQuestionModel) Update(ctx context.Context, data *Question) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, questionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Question, data.Status, data.GroupId, data.DeleteAt, data.Id)
	return err
}

func (m *defaultQuestionModel) tableName() string {
	return m.table
}
